using System.Collections.Concurrent;
using System.Threading.Tasks.Dataflow;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace TestsGenerator;

public class CodeGenerator
{

    private CodeWalker CodeWalker = new();

    private void ChangeCodeWalker()
    {
        foreach (var key in CodeWalker.Classes.Keys)
        {
            foreach (var keyClass in CodeWalker.Classes[key].Keys)
            {
                for (int j = 0; j < CodeWalker.Classes[key][keyClass].Count; j++)
                {
                    if (CodeWalker.Classes[key][keyClass].FindAll(s => s.Equals(CodeWalker.Classes[key][keyClass][j])).Count > 1)
                    {
                        string name = CodeWalker.Classes[key][keyClass][j];
                        int u = 1;
                        for (int k = 0; k < CodeWalker.Classes[key][keyClass].Count; k++)
                        {
                            if (CodeWalker.Classes[key][keyClass][k].Equals(name))
                            {
                                CodeWalker.Classes[key][keyClass][k] = name + u++;
                            }
                        }
                    }
                }
            }
        }
    }

    public Dictionary<string,SyntaxTree> GenerateTest(string content)
    {
        var root = CSharpSyntaxTree.ParseText(content).GetRoot();
        Dictionary<string,SyntaxTree> SyntaxTrees = new();
        CodeWalker.Visit(root);
        ChangeCodeWalker();
        foreach (var namespaceString in CodeWalker.Classes.Keys)
        {
            foreach (var classString in CodeWalker.Classes[namespaceString].Keys)
            {
                var methodList = new MemberDeclarationSyntax[CodeWalker.Classes[namespaceString][classString].Count];
                int j = 0;
                foreach (var childNodeString in CodeWalker.Classes[namespaceString][classString])
                {
                    methodList[j++] = (MethodDeclaration
                        (PredefinedType
                            (Token
                                (SyntaxKind.VoidKeyword)),
                            Identifier(childNodeString + "Test"))
                        .WithAttributeLists(
                            SingletonList<AttributeListSyntax>(
                                AttributeList(
                                    SingletonSeparatedList<AttributeSyntax>(
                                        Attribute(
                                            IdentifierName("Test"))))))
                        .WithModifiers(
                            TokenList(
                                Token(SyntaxKind.PublicKeyword))).WithBody(
                            Block(
                                SingletonList<StatementSyntax>(
                                    ExpressionStatement(
                                        InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    IdentifierName("Assert"),
                                                    IdentifierName("Fail")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                        Argument(
                                                            LiteralExpression(
                                                                SyntaxKind.StringLiteralExpression,
                                                                Literal("autogenerated")))))))))));
                }

                if (namespaceString.Equals(""))
                {
                    SyntaxTrees.Add(classString + "Tests", SyntaxTree(CompilationUnit()
                        .WithMembers(
                            SingletonList<MemberDeclarationSyntax>(
                                (ClassDeclaration(classString + "Tests")
                                            .WithAttributeLists(
                                                SingletonList<AttributeListSyntax>(
                                                    AttributeList(
                                                        SingletonSeparatedList<AttributeSyntax>(
                                                            Attribute(
                                                                IdentifierName("TestFixture"))))))
                                            .WithModifiers(TokenList
                                            (Token
                                                (SyntaxKind.PublicKeyword)))
                                            .WithMembers(new SyntaxList<MemberDeclarationSyntax>(methodList))
                                    )))
                        .NormalizeWhitespace()));
                }
                else
                {
                    SyntaxTrees.Add(classString + "Tests", SyntaxTree(CompilationUnit()
                        .WithMembers(
                            SingletonList<MemberDeclarationSyntax>(
                                FileScopedNamespaceDeclaration(
                                        IdentifierName(namespaceString + ".Tests"))
                                    .WithMembers(new SyntaxList<MemberDeclarationSyntax>(
                                        (ClassDeclaration(classString + "Tests")
                                            .WithAttributeLists(
                                                SingletonList<AttributeListSyntax>(
                                                    AttributeList(
                                                        SingletonSeparatedList<AttributeSyntax>(
                                                            Attribute(
                                                                IdentifierName("TestFixture"))))))
                                            .WithModifiers(TokenList
                                            (Token
                                                (SyntaxKind.PublicKeyword)))
                                            .WithMembers(new SyntaxList<MemberDeclarationSyntax>(methodList))))
                                    )))
                        .NormalizeWhitespace()));
                }
                

            }
        }

        return SyntaxTrees;
    }

}