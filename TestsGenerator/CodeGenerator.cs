using System.Collections.Concurrent;
using System.Threading.Tasks.Dataflow;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace TestsGenerator;

public class CodeGenerator
{

    private CodeWalker CodeWalker = new();

    private void ChangeCodeWalker()
    {
        foreach (var key in CodeWalker.Methods.Keys)
        {
            for (int i = 0; i < CodeWalker.Methods[key].Count; i++)
            {
                if (CodeWalker.Methods[key].FindAll(s => s.Equals(CodeWalker.Methods[key][i])).Count > 1)
                {
                    string name = CodeWalker.Methods[key][i];
                    int j = 1;
                    for (int k = 0; k < CodeWalker.Methods[key].Count; k++)
                    {
                        if (CodeWalker.Methods[key][k].Equals(name))
                        {
                            CodeWalker.Methods[key][k] = name + j++;
                        }
                    }
                }
            }
        }
    }

    public Dictionary<string,SyntaxTree> GenerateTest(string content)
    {
        var root = CSharpSyntaxTree.ParseText(content).GetRoot();
        Dictionary<string,SyntaxTree> SyntaxTrees = new();
        CodeWalker.Visit(root);
        ChangeCodeWalker();
        foreach (var classString in CodeWalker.Methods.Keys)
        {
            var methodList = new MemberDeclarationSyntax[CodeWalker.Methods[classString].Count];
            int j = 0;
            foreach (var childNodeString in CodeWalker.Methods[classString])
            {
                methodList[j++]=(MethodDeclaration
                    (PredefinedType
                        (Token
                            (SyntaxKind.VoidKeyword)),
                        Identifier(childNodeString + "Test"))
                    .WithAttributeLists(
                        SingletonList<AttributeListSyntax>(
                            AttributeList(
                                SingletonSeparatedList<AttributeSyntax>(
                                    Attribute(
                                        IdentifierName("Test"))))))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.PublicKeyword))).WithBody(
                        Block(
                            SingletonList<StatementSyntax>(
                                ExpressionStatement(
                                    InvocationExpression(
                                            MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                IdentifierName("Assert"),
                                                IdentifierName("Fail")))
                                        .WithArgumentList(
                                            ArgumentList(
                                                SingletonSeparatedList<ArgumentSyntax>(
                                                    Argument(
                                                        LiteralExpression(
                                                            SyntaxKind.StringLiteralExpression,
                                                            Literal("autogenerated")))))))))));
            }
            SyntaxTrees.Add(classString + "Tests",SyntaxTree(CompilationUnit()
                .WithMembers(
                    SingletonList<MemberDeclarationSyntax>(
                        FileScopedNamespaceDeclaration(
                                IdentifierName(CodeWalker.fileNamespace+".Tests"))
                            .WithMembers(new SyntaxList<MemberDeclarationSyntax>((ClassDeclaration(classString + "Tests")
                                .WithAttributeLists(
                                    SingletonList<AttributeListSyntax>(
                                        AttributeList(
                                            SingletonSeparatedList<AttributeSyntax>(
                                                Attribute(
                                                    IdentifierName("TestFixture"))))))
                                .WithModifiers(TokenList
                                (Token
                                    (SyntaxKind.PublicKeyword)))
                                .WithMembers(new SyntaxList<MemberDeclarationSyntax>(methodList))))
                            )))
                .NormalizeWhitespace()));
            
        }
        return SyntaxTrees;
    }

}